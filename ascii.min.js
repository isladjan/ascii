'use strict';import{CanvasTexture as e,Color as r,NearestFilter as c,RepeatWrapping as t,Texture as a,Uniform as o}from"three";import{Effect as i}from"postprocessing";let fragment="uniform sampler2D uCharacters;uniform float uCharactersCount;uniform float uCellSize;uniform bool uInvert;uniform vec3 uColor;const vec2 SIZE=vec2(16.);vec3 greyscale(vec3 color,float strength){float g=dot(color,vec3(0.299,0.587,0.114));return mix(color,vec3(g),strength);}vec3 greyscale(vec3 color) {return greyscale(color, 1.0);}void mainImage(const in vec4 inputColor,const in vec2 uv, out vec4 outputColor){vec2 cell=resolution/uCellSize;vec2 grid=1.0/cell;vec2 pixelizedUV=grid*(0.5+floor(uv/grid));vec4 pixelized=texture2D(inputBuffer,pixelizedUV);float greyscaled=greyscale(pixelized.rgb).r;if(uInvert){greyscaled=1.0-greyscaled;}float characterIndex=floor((uCharactersCount-1.0)*greyscaled);vec2 characterPosition=vec2(mod(characterIndex,SIZE.x),floor(characterIndex/SIZE.y));vec2 offset=vec2(characterPosition.x,-characterPosition.y)/SIZE;vec2 charUV=mod(uv*(cell/SIZE),1.0/SIZE)-vec2(0.,1.0/SIZE)+offset;vec4 asciiCharacter=texture2D(uCharacters,charUV);asciiCharacter.rgb=uColor*asciiCharacter.r;asciiCharacter.a=pixelized.a;if(asciiCharacter.r==0.0 && asciiCharacter.g==0.0 && asciiCharacter.b==0.0){asciiCharacter=vec4(0.0,0.0,0.0,0.0);}outputColor=asciiCharacter;}";export class ASCII extends i{constructor({font:e="arial",characters:c=" .:,'-^=*+?!|0#X%WM@",fontSize:t=54,cellSize:i=16,color:l="#ffffff",invert:s=!1}={}){let n=new Map([["uCharacters",new o(new a)],["uCellSize",new o(i)],["uCharactersCount",new o(c.length)],["uColor",new o(new r(l))],["uInvert",new o(s)]]);super("ASCII","uniform sampler2D uCharacters;uniform float uCharactersCount;uniform float uCellSize;uniform bool uInvert;uniform vec3 uColor;const vec2 SIZE=vec2(16.);vec3 greyscale(vec3 color,float strength){float g=dot(color,vec3(0.299,0.587,0.114));return mix(color,vec3(g),strength);}vec3 greyscale(vec3 color) {return greyscale(color, 1.0);}void mainImage(const in vec4 inputColor,const in vec2 uv, out vec4 outputColor){vec2 cell=resolution/uCellSize;vec2 grid=1.0/cell;vec2 pixelizedUV=grid*(0.5+floor(uv/grid));vec4 pixelized=texture2D(inputBuffer,pixelizedUV);float greyscaled=greyscale(pixelized.rgb).r;if(uInvert){greyscaled=1.0-greyscaled;}float characterIndex=floor((uCharactersCount-1.0)*greyscaled);vec2 characterPosition=vec2(mod(characterIndex,SIZE.x),floor(characterIndex/SIZE.y));vec2 offset=vec2(characterPosition.x,-characterPosition.y)/SIZE;vec2 charUV=mod(uv*(cell/SIZE),1.0/SIZE)-vec2(0.,1.0/SIZE)+offset;vec4 asciiCharacter=texture2D(uCharacters,charUV);asciiCharacter.rgb=uColor*asciiCharacter.r;asciiCharacter.a=pixelized.a;if(asciiCharacter.r==0.0 && asciiCharacter.g==0.0 && asciiCharacter.b==0.0){asciiCharacter=vec4(0.0,0.0,0.0,0.0);}outputColor=asciiCharacter;}",{uniforms:n});let u=this.uniforms.get("uCharacters");u&&(u.value=this.createCharactersTexture(c,e,t))}createCharactersTexture(r,a,o){let i=document.createElement("canvas");i.width=i.height=1024;let l=new e(i,void 0,t,t,c,c),s=i.getContext("2d");s.clearRect(0,0,1024,1024),s.font=`${o}px ${a}`,s.textAlign="center",s.textBaseline="middle",s.fillStyle="#fff";for(let n=0;n<r.length;n++){let u=r[n],f=n%16,v=Math.floor(n/16);s.fillText(u,64*f+32,64*v+32)}return l.needsUpdate=!0,l}}